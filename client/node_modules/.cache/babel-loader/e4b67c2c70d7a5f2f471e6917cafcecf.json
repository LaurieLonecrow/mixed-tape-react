{"ast":null,"code":"const LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n};\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n\nconst getToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const accessToken = urlParams.get('access_token');\n  console.log(accessToken);\n  return accessToken;\n};\n\nexport const accessToken = getToken();\n/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */\n\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  const hasError = urlParams.get('error'); // If there's an error OR the token in localStorage has expired, refresh the token\n\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  } // If there is a valid access token in localStorage, use that\n\n\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  } // If there is a token in the URL query params, user is logging in for the first time\n\n\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    } // Set timestamp\n\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); // Return access token from query params\n\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  } // We should never get here!\n\n\n  return false;\n};","map":{"version":3,"sources":["/Users/admin/Documents/Web Development/MixedTape/mixed-tape-react/mixed-tape-react/client/src/hooks/getToken.js"],"names":["LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","getToken","queryString","location","search","urlParams","URLSearchParams","get","console","log","getAccessToken","queryParams","hasError","hasTokenExpired","property","setItem","Date","now"],"mappings":"AACA,MAAMA,iBAAiB,GAAG;AACtBC,EAAAA,WAAW,EAAE,sBADS;AAEtBC,EAAAA,YAAY,EAAE,uBAFQ;AAGtBC,EAAAA,UAAU,EAAE,2BAHU;AAItBC,EAAAA,SAAS,EAAE;AAJW,CAA1B;AAOE,MAAMC,mBAAmB,GAAG;AAC1BJ,EAAAA,WAAW,EAAEK,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACC,WAA9C,CADa;AAE1BC,EAAAA,YAAY,EAAEI,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACE,YAA9C,CAFY;AAG1BC,EAAAA,UAAU,EAAEG,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACG,UAA9C,CAHc;AAI1BC,EAAAA,SAAS,EAAEE,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACI,SAA9C;AAJe,CAA5B;;AAOF,MAAMK,QAAQ,GAAG,MAAM;AACvB,QAAMC,WAAW,GAAGJ,MAAM,CAACK,QAAP,CAAgBC,MAApC;AACA,QAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBJ,WAApB,CAAlB;AACA,QAAMT,WAAW,GAAGY,SAAS,CAACE,GAAV,CAAc,cAAd,CAApB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYhB,WAAZ;AACA,SAAOA,WAAP;AACC,CAPD;;AAQA,OAAO,MAAMA,WAAW,GAAGQ,QAAQ,EAA5B;AAGP;AACA;AACA;AACA;AACA;;AACC,MAAMS,cAAc,GAAG,MAAM;AAC1B,QAAMR,WAAW,GAAGJ,MAAM,CAACK,QAAP,CAAgBC,MAApC;AACA,QAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBJ,WAApB,CAAlB;AACA,QAAMS,WAAW,GAAG;AAClB,KAACnB,iBAAiB,CAACC,WAAnB,GAAiCY,SAAS,CAACE,GAAV,CAAc,cAAd,CADf;AAElB,KAACf,iBAAiB,CAACE,YAAnB,GAAkCW,SAAS,CAACE,GAAV,CAAc,eAAd,CAFhB;AAGlB,KAACf,iBAAiB,CAACG,UAAnB,GAAgCU,SAAS,CAACE,GAAV,CAAc,YAAd;AAHd,GAApB;AAKA,QAAMK,QAAQ,GAAGP,SAAS,CAACE,GAAV,CAAc,OAAd,CAAjB,CAR0B,CAU1B;;AACA,MAAIK,QAAQ,IAAIC,eAAe,EAA3B,IAAiChB,mBAAmB,CAACJ,WAApB,KAAoC,WAAzE,EAAsF;AACpFC,IAAAA,YAAY;AACb,GAbyB,CAe1B;;;AACA,MAAIG,mBAAmB,CAACJ,WAApB,IAAmCI,mBAAmB,CAACJ,WAApB,KAAoC,WAA3E,EAAwF;AACtF,WAAOI,mBAAmB,CAACJ,WAA3B;AACD,GAlByB,CAoB1B;;;AACA,MAAIkB,WAAW,CAACnB,iBAAiB,CAACC,WAAnB,CAAf,EAAgD;AAC9C;AACA,SAAK,MAAMqB,QAAX,IAAuBH,WAAvB,EAAoC;AAClCb,MAAAA,MAAM,CAACC,YAAP,CAAoBgB,OAApB,CAA4BD,QAA5B,EAAsCH,WAAW,CAACG,QAAD,CAAjD;AACD,KAJ6C,CAK9C;;;AACAhB,IAAAA,MAAM,CAACC,YAAP,CAAoBgB,OAApB,CAA4BvB,iBAAiB,CAACI,SAA9C,EAAyDoB,IAAI,CAACC,GAAL,EAAzD,EAN8C,CAO9C;;AACA,WAAON,WAAW,CAACnB,iBAAiB,CAACC,WAAnB,CAAlB;AACD,GA9ByB,CAgC1B;;;AACA,SAAO,KAAP;AACD,CAlCF","sourcesContent":["\nconst LOCALSTORAGE_KEYS = {\n    accessToken: 'spotify_access_token',\n    refreshToken: 'spotify_refresh_token',\n    expireTime: 'spotify_token_expire_time',\n    timestamp: 'spotify_token_timestamp',\n  }\n  \n  const LOCALSTORAGE_VALUES = {\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n    refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n    expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n    timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\n  };\n\nconst getToken = () => {\nconst queryString = window.location.search;\nconst urlParams = new URLSearchParams(queryString);\nconst accessToken = urlParams.get('access_token');\n\nconsole.log(accessToken);\nreturn accessToken\n}\nexport const accessToken = getToken();\n\n\n/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */\n const getAccessToken = () => {\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const queryParams = {\n      [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n      [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n      [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\n    };\n    const hasError = urlParams.get('error');\n  \n    // If there's an error OR the token in localStorage has expired, refresh the token\n    if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n      refreshToken();\n    }\n  \n    // If there is a valid access token in localStorage, use that\n    if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n      return LOCALSTORAGE_VALUES.accessToken;\n    }\n  \n    // If there is a token in the URL query params, user is logging in for the first time\n    if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n      // Store the query params in localStorage\n      for (const property in queryParams) {\n        window.localStorage.setItem(property, queryParams[property]);\n      }\n      // Set timestamp\n      window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n      // Return access token from query params\n      return queryParams[LOCALSTORAGE_KEYS.accessToken];\n    }\n  \n    // We should never get here!\n    return false;\n  };"]},"metadata":{},"sourceType":"module"}