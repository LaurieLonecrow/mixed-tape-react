{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Web Development/MixedTape/mixed-tape-react/mixed-tape-react/client/src/components/Tracks.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios'; //components\n\nimport Form from './Form';\nimport Header from './Header';\nimport { getTracks, getAllText, createText } from \"../APIs\";\nimport Playlist from \"./Playlist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tracks = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [playlistData, setPlaylistData] = useState(null);\n  const [tracksData, setTracksData] = useState(null);\n  const [tracks, setTracks] = useState(null);\n  const [text, setTexts] = useState([]);\n\n  const getAllText = async () => {\n    await fetch('http://localhost:3001/tracks').then(res => res.json()).then(data => setTexts(data));\n  };\n\n  const createText = async newText => {\n    console.log(newText, 'newText');\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json' // 'Accept': 'application/json',\n\n      },\n      body: JSON.stringify(newText)\n    };\n    await fetch('http://localhost:3001/tracks', request).then(res => res.json()).then(text => setTexts(textList => [...textList, text]));\n    getAllText();\n  };\n\n  useEffect(() => {\n    getAllText();\n  }, []); //get the playlist Object with track data etc.\n\n  useEffect(() => {\n    const getPlaylistData = async () => {\n      const playlist = await getTracks(id);\n      setPlaylistData(playlist.data);\n      setTracksData(playlist.data.tracks);\n    };\n\n    getPlaylistData();\n  }, [id]); //get track listing and next set of tracks\n\n  useEffect(() => {\n    if (!tracksData) {\n      return;\n    }\n\n    const getMoreTracks = async () => {\n      if (tracksData.next) {\n        const nextTracks = await axios.get(tracksData.next);\n        setTracksData(nextTracks.data);\n      }\n    };\n\n    setTracks(tracks => [...(tracks ? tracks : []), ...tracksData.items]);\n    getMoreTracks();\n  }, [tracksData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), tracksData ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tracksData.items.map((track, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: track.track.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: track.track.album.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: track.track.artists.map((artist, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: artist.name\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: createText,\n          trackId: track.track.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this)]\n      }, track.track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Tracks Available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tracks, \"roQ7gSHDVaJ52cUcU5Blt8cx+0M=\", false, function () {\n  return [useParams];\n});\n\n_c = Tracks;\nexport default Tracks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"sources":["/Users/admin/Documents/Web Development/MixedTape/mixed-tape-react/mixed-tape-react/client/src/components/Tracks.js"],"names":["useState","useEffect","useParams","axios","Form","Header","getTracks","getAllText","createText","Playlist","Tracks","id","playlistData","setPlaylistData","tracksData","setTracksData","tracks","setTracks","text","setTexts","fetch","then","res","json","data","newText","console","log","request","method","headers","body","JSON","stringify","textList","getPlaylistData","playlist","getMoreTracks","next","nextTracks","get","items","map","track","i","name","album","artists","artist"],"mappings":"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","sourcesContent":["import {useState, useEffect} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios';\n\n//components\nimport Form from './Form'\nimport Header from './Header'\n\nimport { getTracks, getAllText, createText } from \"../APIs\";\nimport Playlist from \"./Playlist\";\n\n\nconst Tracks = () => {\n    const { id } = useParams();\n    const [playlistData, setPlaylistData] = useState(null);\n    const [tracksData, setTracksData] = useState(null);\n    const [tracks, setTracks] = useState(null);\n    const [text, setTexts]=useState([]);\n\n    const getAllText = async () => {\n        await fetch('http://localhost:3001/tracks')\n        .then(res => res.json())\n        .then(data => setTexts(data))\n    }\n      \n    const createText = async (newText) => {\n        console.log(newText, 'newText')\n        const request ={\n          method: 'POST',\n          headers: {\n            'Content-Type':'application/json'\n            // 'Accept': 'application/json',\n          },\n          body: JSON.stringify(newText)\n        }\n        await fetch('http://localhost:3001/tracks', request)\n            .then(res => res.json())\n            .then((text) => setTexts(textList => [...textList, text]));\n            getAllText();\n      }\n\n  useEffect(() => {\n    getAllText();\n  },[])\n\n//get the playlist Object with track data etc.\n    useEffect(() => {\n        const getPlaylistData = async () => {\n            const playlist = await getTracks(id);\n            setPlaylistData(playlist.data);\n            setTracksData(playlist.data.tracks)\n        }\n        getPlaylistData();\n    },[id]);\n\n//get track listing and next set of tracks\n    useEffect(() => {\n        if(!tracksData) {\n        return;\n    }\n    const getMoreTracks = async () => {\n        if (tracksData.next) {\n            const nextTracks = await axios.get(tracksData.next);\n            setTracksData(nextTracks.data)\n        }\n    };\n    setTracks(tracks => ([\n        ...tracks ? tracks : [],\n        ...tracksData.items\n    ]));\n    getMoreTracks()\n    },[tracksData])\n\nreturn (\n\n    <div>\n        <Header/>\n        {/* This is the main Making a Playlist Page,\n        include Tracks Listings, Inputs areas, and Footer with Player,\n        include ability to change Fonts/Background image */}\n        {tracksData ? (\n        <ul>\n            {tracksData.items.map((track, i) => (\n            <li key={track.track.id}>\n                <h3>{track.track.name}</h3>\n                <h3>{track.track.album.name}</h3>\n                <div>\n                  {track.track.artists.map((artist, i) => (\n                    <span key={i}>\n                      {artist.name}\n                    </span>\n                  ))}\n                </div>\n                <Form onSubmit={createText}\n                      trackId={track.track.id}\n                       />\n            </li>))}\n            \n        </ul>\n        ) : <p>No Tracks Available</p>}\n        \n\n    </div>\n\n)\n}\n\nexport default Tracks;"]},"metadata":{},"sourceType":"module"}