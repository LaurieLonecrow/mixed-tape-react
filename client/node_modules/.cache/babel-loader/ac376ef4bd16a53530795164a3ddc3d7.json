{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst redirectUri = \"http://localhost:3000/\";\nconst clientId = \"70187c959b294d23b6bd710c3c916063\";\nconst spotify = new SpotifyWebApi();\nconst scopes = [\"playlist-modify-private\", \"playlist-read-private\", \"playlist-modify-public\", \"playlist-read-collaborative\", \"user-read-playback-state\", \"user-modify-playback-state\", \"app-remote-control\"];\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`;\nexport const useLogin = () => {\n  _s();\n\n  const [token, setToken] = useState();\n  const [playlists, setPlaylists] = useState();\n\n  const getTokenFromUrl = () => {\n    return window.location.hash.substring(1).split(\"&\").reduce((initial, item) => {\n      let parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n      return initial;\n    }, {});\n  };\n\n  const getPlaylists = async () => {\n    try {\n      await spotify.getUserPlaylists().then(playlists => {\n        setPlaylists(playlists.items);\n      });\n    } catch (e) {\n      console.log();\n    }\n  };\n\n  console.log(playlists);\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n\n    if (_token) {\n      setToken(_token);\n      spotify.setAccessToken(_token);\n    }\n\n    console.log('[token]', token);\n  }, [_token]);\n  return {\n    playlists,\n    setPlaylists\n  };\n};\n\n_s(useLogin, \"e8h+RsUDCmBi6u7fIsB6cSXtBPM=\");","map":{"version":3,"sources":["/Users/admin/Documents/Web Development/MixedTape/mixed-tape-react/mixed-tape-react/src/hooks/useLogin.js"],"names":["React","useState","useEffect","SpotifyWebApi","authEndpoint","redirectUri","clientId","spotify","scopes","loginUrl","join","useLogin","token","setToken","playlists","setPlaylists","getTokenFromUrl","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","getPlaylists","getUserPlaylists","then","items","e","console","log","_token","access_token","setAccessToken"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,MAAMC,YAAY,GAAG,wCAArB;AACA,MAAMC,WAAW,GAAG,wBAApB;AACA,MAAMC,QAAQ,GAAG,kCAAjB;AAEA,MAAMC,OAAO,GAAG,IAAIJ,aAAJ,EAAhB;AAEA,MAAMK,MAAM,GAAG,CACb,yBADa,EAEb,uBAFa,EAGb,wBAHa,EAIb,6BAJa,EAKb,0BALa,EAMb,4BANa,EAOb,oBAPa,CAAf;AAUA,OAAO,MAAMC,QAAQ,GAAI,GAAEL,YAAa,cAAaE,QAAS,iBAAgBD,WAAY,UAASG,MAAM,CAACE,IAAP,CAC/F,KAD+F,CACxF,uCADJ;AAIP,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,EAAlC;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,EAA1C;;AAEA,QAAMe,eAAe,GAAG,MAAM;AAC1B,WAAOC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CACJC,SADI,CACM,CADN,EAEJC,KAFI,CAEE,GAFF,EAGJC,MAHI,CAGG,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACzB,UAAIC,KAAK,GAAGD,IAAI,CAACH,KAAL,CAAW,GAAX,CAAZ;AACAE,MAAAA,OAAO,CAACE,KAAK,CAAC,CAAD,CAAN,CAAP,GAAoBC,kBAAkB,CAACD,KAAK,CAAC,CAAD,CAAN,CAAtC;AACA,aAAOF,OAAP;AACD,KAPI,EAOF,EAPE,CAAP;AAQD,GATH;;AAWE,QAAMI,YAAY,GAAG,YAAW;AAC5B,QAAI;AACF,YAAMpB,OAAO,CAACqB,gBAAR,GACLC,IADK,CACCf,SAAD,IAAe;AACnBC,QAAAA,YAAY,CAACD,SAAS,CAACgB,KAAX,CAAZ;AACD,OAHK,CAAN;AAKD,KAND,CAME,OAAOC,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR;AACH;AAGJ,GAZD;;AAaAD,EAAAA,OAAO,CAACC,GAAR,CAAYnB,SAAZ;AAEAZ,EAAAA,SAAS,CAAC,MAAK;AACb,UAAMiB,IAAI,GAAGH,eAAe,EAA5B;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,EAAvB;AACA,UAAMe,MAAM,GAAGf,IAAI,CAACgB,YAApB;;AACA,QAAGD,MAAH,EAAW;AACTrB,MAAAA,QAAQ,CAACqB,MAAD,CAAR;AACA3B,MAAAA,OAAO,CAAC6B,cAAR,CAAuBF,MAAvB;AACD;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBrB,KAAvB;AACD,GATQ,EASN,CAACsB,MAAD,CATM,CAAT;AAWF,SAAO;AAACpB,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAAP;AAEC,CA3CM;;GAAMJ,Q","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst redirectUri = \"http://localhost:3000/\";\nconst clientId = \"70187c959b294d23b6bd710c3c916063\";\n\nconst spotify = new SpotifyWebApi();\n\nconst scopes = [\n  \"playlist-modify-private\",\n  \"playlist-read-private\",\n  \"playlist-modify-public\",\n  \"playlist-read-collaborative\",\n  \"user-read-playback-state\",\n  \"user-modify-playback-state\",\n  \"app-remote-control\",\n];\n\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n    \"%20\")}&response_type=token&show_dialog=true`;\n\n\nexport const useLogin = () => {\nconst [token, setToken] = useState();\nconst [playlists, setPlaylists] = useState();\n   \nconst getTokenFromUrl = () => {\n    return window.location.hash\n      .substring(1)\n      .split(\"&\")\n      .reduce((initial, item) => {\n        let parts = item.split(\"=\");\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n        return initial;\n      }, {});\n  };\n\n  const getPlaylists = async() => {\n      try {\n        await spotify.getUserPlaylists()\n        .then((playlists) => {\n          setPlaylists(playlists.items);\n        });\n\n      } catch (e) {\n          console.log()\n      }\n    \n     \n  } \n  console.log(playlists)\n\n  useEffect(()=> {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n    if(_token) {\n      setToken(_token);\n      spotify.setAccessToken(_token)\n    }\n    console.log('[token]', token)\n  }, [_token]);\n\nreturn {playlists, setPlaylists}\n\n};\n"]},"metadata":{},"sourceType":"module"}