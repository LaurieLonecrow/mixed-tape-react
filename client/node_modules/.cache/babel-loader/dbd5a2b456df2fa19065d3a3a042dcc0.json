{"ast":null,"code":"const authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst redirectUri = \"http://localhost:3000/\";\nconst clientId = \"70187c959b294d23b6bd710c3c916063\";\nconst scopes = [\"playlist-modify-private\", \"playlist-read-private\", \"playlist-modify-public\", \"playlist-read-collaborative\", \"user-read-playback-state\", \"user-modify-playback-state\", \"app-remote-control\"];\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`;\nexport const getTokenFromUrl = () => {\n  return window.location.hash.substring(1).split(\"&\").reduce((initial, item) => {\n    let parts = item.split(\"=\");\n    initial[parts[0]] = decodeURIComponent(parts[1]);\n    return initial;\n  }, {});\n};\nconst [token, setToken] = useState();\nconst [playlists, setPlaylists] = useState();\nuseEffect(() => {\n  const hash = getTokenFromUrl();\n  window.location.hash = \"\";\n  const _token = hash.access_token;\n\n  if (_token) {\n    setToken(_token);\n    spotify.setAccessToken(_token);\n  }\n\n  console.log('[token]', token);\n}, []);\n\nconst getPlaylists = async () => {\n  await spotify.getUserPlaylists().then(playlists => {\n    setPlaylists(playlists.items);\n  });\n};\n\nconsole.log(playlists);","map":{"version":3,"sources":["/Users/admin/Documents/Web Development/MixedTape/mixed-tape-react/mixed-tape-react/src/hooks/useLogin.js"],"names":["authEndpoint","redirectUri","clientId","scopes","loginUrl","join","getTokenFromUrl","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","token","setToken","useState","playlists","setPlaylists","useEffect","_token","access_token","spotify","setAccessToken","console","log","getPlaylists","getUserPlaylists","then","items"],"mappings":"AACA,MAAMA,YAAY,GAAG,wCAArB;AACA,MAAMC,WAAW,GAAG,wBAApB;AACA,MAAMC,QAAQ,GAAG,kCAAjB;AAEA,MAAMC,MAAM,GAAG,CACb,yBADa,EAEb,uBAFa,EAGb,wBAHa,EAIb,6BAJa,EAKb,0BALa,EAMb,4BANa,EAOb,oBAPa,CAAf;AAUA,OAAO,MAAMC,QAAQ,GAAI,GAAEJ,YAAa,cAAaE,QAAS,iBAAgBD,WAAY,UAASE,MAAM,CAACE,IAAP,CAC/F,KAD+F,CACxF,uCADJ;AAGP,OAAO,MAAMC,eAAe,GAAG,MAAM;AACjC,SAAOC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CACJC,SADI,CACM,CADN,EAEJC,KAFI,CAEE,GAFF,EAGJC,MAHI,CAGG,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACzB,QAAIC,KAAK,GAAGD,IAAI,CAACH,KAAL,CAAW,GAAX,CAAZ;AACAE,IAAAA,OAAO,CAACE,KAAK,CAAC,CAAD,CAAN,CAAP,GAAoBC,kBAAkB,CAACD,KAAK,CAAC,CAAD,CAAN,CAAtC;AACA,WAAOF,OAAP;AACD,GAPI,EAOF,EAPE,CAAP;AAQD,CATI;AAWL,MAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,EAAlC;AACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BF,QAAQ,EAA1C;AAEAG,SAAS,CAAC,MAAK;AACb,QAAMb,IAAI,GAAGH,eAAe,EAA5B;AACAC,EAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,EAAvB;AACA,QAAMc,MAAM,GAAGd,IAAI,CAACe,YAApB;;AACA,MAAGD,MAAH,EAAW;AACTL,IAAAA,QAAQ,CAACK,MAAD,CAAR;AACAE,IAAAA,OAAO,CAACC,cAAR,CAAuBH,MAAvB;AACD;;AACDI,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBX,KAAvB;AACD,CATQ,EASN,EATM,CAAT;;AAYF,MAAMY,YAAY,GAAG,YAAW;AAC9B,QAAMJ,OAAO,CAACK,gBAAR,GACHC,IADG,CACGX,SAAD,IAAe;AACnBC,IAAAA,YAAY,CAACD,SAAS,CAACY,KAAX,CAAZ;AACD,GAHG,CAAN;AAKD,CAND;;AAOAL,OAAO,CAACC,GAAR,CAAYR,SAAZ","sourcesContent":["\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst redirectUri = \"http://localhost:3000/\";\nconst clientId = \"70187c959b294d23b6bd710c3c916063\";\n\nconst scopes = [\n  \"playlist-modify-private\",\n  \"playlist-read-private\",\n  \"playlist-modify-public\",\n  \"playlist-read-collaborative\",\n  \"user-read-playback-state\",\n  \"user-modify-playback-state\",\n  \"app-remote-control\",\n];\n\nexport const loginUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n    \"%20\")}&response_type=token&show_dialog=true`;\n\nexport const getTokenFromUrl = () => {\n    return window.location.hash\n      .substring(1)\n      .split(\"&\")\n      .reduce((initial, item) => {\n        let parts = item.split(\"=\");\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n        return initial;\n      }, {});\n  };\n\n  const [token, setToken] = useState();\n  const [playlists, setPlaylists] = useState();\n\n  useEffect(()=> {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n    if(_token) {\n      setToken(_token);\n      spotify.setAccessToken(_token)\n    }\n    console.log('[token]', token)\n  }, []);\n\n\nconst getPlaylists = async() => {\n  await spotify.getUserPlaylists()\n    .then((playlists) => {\n      setPlaylists(playlists.items);\n    });\n   \n} \nconsole.log(playlists)\n\n"]},"metadata":{},"sourceType":"module"}