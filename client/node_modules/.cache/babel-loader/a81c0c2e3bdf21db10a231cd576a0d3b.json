{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Web Development/MixedTape/mixed-tape-react/mixed-tape-react/client/src/components/Tracks.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios'; //components\n\nimport Form from './Form';\nimport Header from './Header';\nimport { getTracks } from \"../APIs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tracks = ({\n  playlistId\n}) => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [playlistData, setPlaylistData] = useState(null);\n  const [tracksData, setTracksData] = useState(null);\n  const [tracks, setTracks] = useState(null);\n  const [text, setTexts] = useState([]);\n\n  const getAllText = async () => {\n    await fetch('http://localhost:3001/tracks').then(res => res.json()).then(data => setTexts(data));\n  };\n\n  const createText = async newText => {\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(newText)\n    };\n    await fetch('http://localhost:3001/tracks', request).then(res => res.text()).then(text => setTexts(textList => [...textList, text]));\n    getAllText();\n  };\n\n  useEffect(() => {\n    getAllText();\n  }, []); //get the playlist Object with track data etc.\n\n  useEffect(() => {\n    const getPlaylistData = async () => {\n      const playlist = await getTracks(id);\n      setPlaylistData(playlist.data);\n      setTracksData(playlist.data.tracks);\n    };\n\n    getPlaylistData();\n  }, [id]); //get track listing and next set of tracks\n\n  useEffect(() => {\n    if (!tracksData) {\n      return;\n    }\n\n    const getMoreTracks = async () => {\n      if (tracksData.next) {\n        const nextTracks = await axios.get(tracksData.next);\n        setTracksData(nextTracks.data);\n      }\n    };\n\n    setTracks(tracks => [...(tracks ? tracks : []), ...tracksData.items]);\n    getMoreTracks();\n  }, [tracksData]);\n  console.log(playlistData);\n  console.log(tracksData, 'trackdata'); // console.log(tracksData.items[0].track.name, 'items')\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), tracksData ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tracksData.items.map((track, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: track.track.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: createText,\n          tracks: tracksData.items\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Tracks Available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tracks, \"roQ7gSHDVaJ52cUcU5Blt8cx+0M=\", false, function () {\n  return [useParams];\n});\n\n_c = Tracks;\nexport default Tracks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"sources":["/Users/admin/Documents/Web Development/MixedTape/mixed-tape-react/mixed-tape-react/client/src/components/Tracks.js"],"names":["useState","useEffect","useParams","axios","Form","Header","getTracks","Tracks","playlistId","id","playlistData","setPlaylistData","tracksData","setTracksData","tracks","setTracks","text","setTexts","getAllText","fetch","then","res","json","data","createText","newText","request","method","headers","body","JSON","stringify","textList","getPlaylistData","playlist","getMoreTracks","next","nextTracks","get","items","console","log","map","track","i","name"],"mappings":"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","sourcesContent":["import {useState, useEffect} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios';\n\n//components\nimport Form from './Form'\nimport Header from './Header'\n\nimport { getTracks } from \"../APIs\";\n\n\nconst Tracks = ({playlistId}) => {\n    const { id } = useParams();\n    const [playlistData, setPlaylistData] = useState(null);\n    const [tracksData, setTracksData] = useState(null);\n    const [tracks, setTracks] = useState(null);\n    const [text, setTexts] =useState([]);\n\n\n  const getAllText = async () => {\n    await fetch('http://localhost:3001/tracks')\n    .then(res => res.json())\n    .then(data => setTexts(data))\n}\n  \n  const createText = async (newText) => {\n    const request ={\n      method: 'POST',\n      headers: {\n        'Content-Type':'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify(newText)\n    }\n    await fetch('http://localhost:3001/tracks', request)\n        .then(res => res.text())\n        .then((text) => setTexts(textList => [...textList, text]));\n        getAllText();\n  }\n  useEffect(() => {\n    getAllText();\n  },[])\n\n//get the playlist Object with track data etc.\n    useEffect(() => {\n        const getPlaylistData = async () => {\n            const playlist = await getTracks(id);\n            setPlaylistData(playlist.data);\n            setTracksData(playlist.data.tracks)\n        }\n        getPlaylistData();\n    },[id]);\n\n//get track listing and next set of tracks\n    useEffect(() => {\n        if(!tracksData) {\n        return;\n    }\n    const getMoreTracks = async () => {\n        if (tracksData.next) {\n            const nextTracks = await axios.get(tracksData.next);\n            setTracksData(nextTracks.data)\n        }\n    };\n    setTracks(tracks => ([\n        ...tracks ? tracks : [],\n        ...tracksData.items\n    ]));\n    getMoreTracks()\n    },[tracksData])\n\n    console.log(playlistData)\n    console.log(tracksData, 'trackdata')\n    // console.log(tracksData.items[0].track.name, 'items')\n\n\nreturn (\n\n    <div>\n        <Header/>\n        {/* This is the main Making a Playlist Page,\n        include Tracks Listings, Inputs areas, and Footer with Player,\n        include ability to change Fonts/Background image */}\n        {tracksData ? (\n        <ul>\n            {tracksData.items.map((track, i) => (\n            <li key={i}>\n                <h3>{track.track.name}</h3>\n                <Form onSubmit={createText}\n                      tracks={tracksData.items}\n                       />\n                \n            </li>))}\n        \n        </ul>\n        ) : <p>No Tracks Available</p>}\n    </div>\n\n)\n}\n\nexport default Tracks;"]},"metadata":{},"sourceType":"module"}