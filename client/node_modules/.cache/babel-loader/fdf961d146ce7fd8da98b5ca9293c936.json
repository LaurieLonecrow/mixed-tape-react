{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Web Development/MixedTape/mixed-tape-react/mixed-tape-react/client/src/components/Tracks/Tracks.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios';\nimport { getTracks } from \"../../APIs\"; //components\n\nimport Form from '../Form';\nimport Header from '../Header';\nimport Playlist from \"../Playlist\";\nimport Text from \"../Text/Text\"; //styles \n\nimport { Wrapper, Content, ListItem } from './Tracks.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Tracks = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [playlistData, setPlaylistData] = useState(null);\n  const [tracksData, setTracksData] = useState(null);\n  const [tracks, setTracks] = useState(null);\n  const [texts, setTexts] = useState([]);\n\n  const getAllText = async () => {\n    await fetch('http://localhost:3001/tracks').then(res => res.json()).then(data => setTexts(data));\n  };\n\n  const createText = async newText => {\n    console.log(newText, 'newText');\n    const request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(newText)\n    };\n    await fetch('http://localhost:3001/tracks', request).then(res => res.json()).then(text => setTexts(textList => [...textList, text]));\n    getAllText();\n  };\n\n  useEffect(() => {\n    getAllText();\n  }, []); //get the playlist Object with track data etc.\n\n  useEffect(() => {\n    const getPlaylistData = async () => {\n      const playlist = await getTracks(id);\n      setPlaylistData(playlist.data);\n      setTracksData(playlist.data.tracks);\n    };\n\n    getPlaylistData();\n  }, [id]); //get track listing and next set of tracks\n\n  useEffect(() => {\n    if (!tracksData) {\n      return;\n    }\n\n    const getMoreTracks = async () => {\n      if (tracksData.next) {\n        const nextTracks = await axios.get(tracksData.next);\n        setTracksData(nextTracks.data);\n      }\n    };\n\n    setTracks(tracks => [...(tracks ? tracks : []), ...tracksData.items]);\n    getMoreTracks();\n  }, [tracksData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), tracksData ? /*#__PURE__*/_jsxDEV(Content, {\n      children: tracksData.items.map((track, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(ListItem, {\n          children: [/*#__PURE__*/_jsxDEV(Playlist, {\n            track: track\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: createText,\n            trackId: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), texts ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: texts.map(text => text.trackId === track.track.id ? /*#__PURE__*/_jsxDEV(Text, {\n            text: text.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 59\n          }, this) : null)\n        }, void 0, false) : null]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Tracks Available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tracks, \"8l0dg8MilHlGWbQ9hNwc0Z7PR5w=\", false, function () {\n  return [useParams];\n});\n\n_c = Tracks;\nexport default Tracks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"sources":["/Users/admin/Documents/Web Development/MixedTape/mixed-tape-react/mixed-tape-react/client/src/components/Tracks/Tracks.js"],"names":["useState","useEffect","useParams","axios","getTracks","Form","Header","Playlist","Text","Wrapper","Content","ListItem","Tracks","id","playlistData","setPlaylistData","tracksData","setTracksData","tracks","setTracks","texts","setTexts","getAllText","fetch","then","res","json","data","createText","newText","console","log","request","method","headers","body","JSON","stringify","text","textList","getPlaylistData","playlist","getMoreTracks","next","nextTracks","get","items","map","track","i","trackId","content"],"mappings":"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","sourcesContent":["import {useState, useEffect} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios';\nimport { getTracks } from \"../../APIs\";\n\n//components\nimport Form from '../Form'\nimport Header from '../Header'\nimport Playlist from \"../Playlist\";\nimport Text from \"../Text/Text\";\n\n//styles \nimport {Wrapper, Content, ListItem} from './Tracks.styles';\n\n\nconst Tracks = () => {\n    const { id } = useParams();\n    const [playlistData, setPlaylistData] = useState(null);\n    const [tracksData, setTracksData] = useState(null);\n    const [tracks, setTracks] = useState(null);\n    const [texts, setTexts]=useState([]);\n\n    const getAllText = async () => {\n        await fetch('http://localhost:3001/tracks')\n        .then(res => res.json())\n        .then(data => setTexts(data))\n    }\n      \n    const createText = async (newText) => {\n        console.log(newText, 'newText')\n        const request ={\n          method: 'POST',\n          headers: {\n            'Content-Type':'application/json',\n            'Accept': 'application/json',\n          },\n          body: JSON.stringify(newText)\n        }\n        await fetch('http://localhost:3001/tracks', request)\n            .then(res => res.json())\n            .then((text) => setTexts(textList => [...textList, text]));\n            getAllText();\n      }\n\n  useEffect(() => {\n    getAllText();\n  },[])\n\n//get the playlist Object with track data etc.\n    useEffect(() => {\n        const getPlaylistData = async () => {\n            const playlist = await getTracks(id);\n            setPlaylistData(playlist.data);\n            setTracksData(playlist.data.tracks)\n        }\n        getPlaylistData();\n    },[id]);\n\n//get track listing and next set of tracks\n    useEffect(() => {\n        if(!tracksData) {\n        return;\n    }\n    const getMoreTracks = async () => {\n        if (tracksData.next) {\n            const nextTracks = await axios.get(tracksData.next);\n            setTracksData(nextTracks.data)\n        }\n    };\n    setTracks(tracks => ([\n        ...tracks ? tracks : [],\n        ...tracksData.items\n    ]));\n    getMoreTracks()\n    },[tracksData])\n\nreturn (\n\n    <div>\n        <Header/>\n        {tracksData ? (\n        <Content>\n            {tracksData.items.map((track, i) => (\n            <li  key={i}>\n                <ListItem>\n                <Playlist track={track}/>\n                <Form onSubmit={createText} trackId={id}/>\n                </ListItem>\n                {texts? (\n                    <>\n                    {texts.map(text => \n                        text.trackId === track.track.id ? <Text text={text.content}/> : \n                            null)}\n                    </>\n                        ) : null}\n                </li>))}\n        </Content>\n        ) : <p>No Tracks Available</p>}\n    </div>\n)\n}\n\nexport default Tracks;"]},"metadata":{},"sourceType":"module"}