{"ast":null,"code":"const LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n};\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n\nconst getToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const tokenParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  console.log(tokenParams[LOCALSTORAGE_KEYS.accessToken]); //if user has logged in before and there is an accessToken in storage\n\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  } //if user has not logged in before set the accessToken in storage\n\n\n  if (tokenParams[LOCALSTORAGE_KEYS.accessToken]) {\n    window.localStorage.setItem('accessToken', tokenParams[LOCALSTORAGE_KEYS.accessToken]);\n  }\n\n  return tokenParams[LOCALSTORAGE_KEYS.accessToken];\n};\n\nexport const accessToken = getToken();\nexport const logout = () => {\n  window.localStorage.removeItem;\n};","map":{"version":3,"sources":["/Users/admin/Documents/Web Development/MixedTape/mixed-tape-react/mixed-tape-react/client/src/hooks/getToken.js"],"names":["LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","getToken","queryString","location","search","urlParams","URLSearchParams","tokenParams","get","console","log","setItem","logout","removeItem"],"mappings":"AACA,MAAMA,iBAAiB,GAAG;AACtBC,EAAAA,WAAW,EAAE,sBADS;AAEtBC,EAAAA,YAAY,EAAE,uBAFQ;AAGtBC,EAAAA,UAAU,EAAE,2BAHU;AAItBC,EAAAA,SAAS,EAAE;AAJW,CAA1B;AAOE,MAAMC,mBAAmB,GAAG;AAC1BJ,EAAAA,WAAW,EAAEK,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACC,WAA9C,CADa;AAE1BC,EAAAA,YAAY,EAAEI,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACE,YAA9C,CAFY;AAG1BC,EAAAA,UAAU,EAAEG,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACG,UAA9C,CAHc;AAI1BC,EAAAA,SAAS,EAAEE,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACI,SAA9C;AAJe,CAA5B;;AAOF,MAAMK,QAAQ,GAAG,MAAM;AACvB,QAAMC,WAAW,GAAGJ,MAAM,CAACK,QAAP,CAAgBC,MAApC;AACA,QAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBJ,WAApB,CAAlB;AACA,QAAMK,WAAW,GAAG;AAChB,KAACf,iBAAiB,CAACC,WAAnB,GAAiCY,SAAS,CAACG,GAAV,CAAc,cAAd,CADjB;AAEhB,KAAChB,iBAAiB,CAACE,YAAnB,GAAkCW,SAAS,CAACG,GAAV,CAAc,eAAd,CAFlB;AAGhB,KAAChB,iBAAiB,CAACG,UAAnB,GAAgCU,SAAS,CAACG,GAAV,CAAc,YAAd;AAHhB,GAApB;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAW,CAACf,iBAAiB,CAACC,WAAnB,CAAvB,EATuB,CAWvB;;AACA,MAAII,mBAAmB,CAACJ,WAApB,IAAmCI,mBAAmB,CAACJ,WAApB,KAAoC,WAA3E,EAAwF;AACpF,WAAOI,mBAAmB,CAACJ,WAA3B;AACH,GAdsB,CAgBvB;;;AACA,MAAIc,WAAW,CAACf,iBAAiB,CAACC,WAAnB,CAAf,EAAgD;AAC5CK,IAAAA,MAAM,CAACC,YAAP,CAAoBY,OAApB,CAA4B,aAA5B,EAA2CJ,WAAW,CAACf,iBAAiB,CAACC,WAAnB,CAAtD;AACH;;AAED,SAAOc,WAAW,CAACf,iBAAiB,CAACC,WAAnB,CAAlB;AACC,CAtBD;;AAuBA,OAAO,MAAMA,WAAW,GAAGQ,QAAQ,EAA5B;AAEP,OAAO,MAAMW,MAAM,GAAG,MAAM;AACxBd,EAAAA,MAAM,CAACC,YAAP,CAAoBc,UAApB;AACH,CAFM","sourcesContent":["\nconst LOCALSTORAGE_KEYS = {\n    accessToken: 'spotify_access_token',\n    refreshToken: 'spotify_refresh_token',\n    expireTime: 'spotify_token_expire_time',\n    timestamp: 'spotify_token_timestamp',\n  }\n  \n  const LOCALSTORAGE_VALUES = {\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n    refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n    expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n    timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\n  };\n\nconst getToken = () => {\nconst queryString = window.location.search;\nconst urlParams = new URLSearchParams(queryString);\nconst tokenParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\n  };  \n\nconsole.log(tokenParams[LOCALSTORAGE_KEYS.accessToken]);\n\n//if user has logged in before and there is an accessToken in storage\nif (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken\n}\n\n//if user has not logged in before set the accessToken in storage\nif (tokenParams[LOCALSTORAGE_KEYS.accessToken]) {\n    window.localStorage.setItem('accessToken', tokenParams[LOCALSTORAGE_KEYS.accessToken]);\n}\n\nreturn tokenParams[LOCALSTORAGE_KEYS.accessToken];\n}\nexport const accessToken = getToken();\n\nexport const logout = () => {\n    window.localStorage.removeItem\n}\n\n\n  \n   "]},"metadata":{},"sourceType":"module"}